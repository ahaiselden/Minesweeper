@page "/"

@implements IDisposable;


@using Minesweeper.Models;
@using Minesweeper.Enumerations;
@using Minesweeper.Game;
@using System.Drawing;
@using System.Timers;

<style>
    html {
        background-color: #c0c0c0;
        background-image: url(images/win31default.png);
        background-repeat: no-repeat;
        background-position: bottom left;
        min-height: 100%;
    }

    body {
        background-color: rgba(0,0,0,0);
        min-height: 100%;
    }
</style>

<div class="container h-100 mh-100 pt-5">
    <div class="row h-100 justify-content-center align-items-center">
        <div class="card">
            <div class="card-header">
                <div class="top-row">
                    <div class="float-left d-inline-block win31formswitch">
                    </div>
                    <div class="d-inline-block text-center">
                        Minesweeper - Blazor WASM
                    </div>
                    <div class="float-right d-inline-block win31formswitch">
                    </div>
                </div>
                <div class="row menu-row">
                    <div class="col">
                        <div class="float-left">
                            @foreach (Difficulty difficulty in Enum.GetValues(typeof(Difficulty)))
                            {
                                <a class="minesweeper-difficulty-selector"
                                   @onclick="@(() => { selectedDifficulty = difficulty; OnChangeDifficulty(); })">
                                    <span class="minesweeper-difficulty-selector-text @(selectedDifficulty == difficulty ? "minesweeper-difficulty-selector-text-selected" : string.Empty)">
                                        @((minesweeper?.Difficulty ?? Difficulty.Beginner) == Difficulty.Beginner ? difficulty.ToString().Substring(0,3) : difficulty.ToString())
                                    </span>
                                </a>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="row minesweeper-scores">
                    <div class="d-inline-block col text-left pl-0 pr-0">
                        <span class="minesweeper-count pr-2 pl-2">@minesweeper.UnflaggedCount.ToString("000")</span>
                    </div>
                    <div class="d-flex col text-center pl-0 pr-0">
                        <img @onclick="SmileyClicked" class="minesweeper-smiley" src="images/@minesweeper.GetImageFromState()" />
                    </div>
                    <div class="d-inline-block col text-right pl-0 pr-0">
                        <span class="minesweeper-count pr-2 pl-2">@(ElapsedSeconds.ToString("000"))</span>
                    </div>
                </div>
                <div class="row d-inline-block minesweeper-tiles mt-2">

                    @if (minesweeper?.Tiles != null)
                    {
                        bool gameDisabled = (minesweeper.State == GameState.Won || minesweeper.State == GameState.Lost);

                        for (int y = 0; y < minesweeper.Tiles.GetLength(1); y++)
                        {
                            <div class="row flex-nowrap no-gutters minesweeper-row">
                                @for (int x = 0; x < minesweeper.Tiles.GetLength(0); x++)
                                {
                                    int localX = x, localY = y;
                                    Tile localTile = minesweeper.Tiles[x, y];


                                    if (localTile.IsInspected)
                                    {
                                        if (localTile.HasMine)
                                        {
                                            <button class="col minesweeper-tile-clicked minesweeper-tile-clicked-mine" oncontextmenu="return false;" disabled="@true">
                                                <img class="minesweeper-tile-image" src="images/mine.png" />
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="col minesweeper-tile-clicked minesweeper-tile-clicked-@localTile.SurroundingMines" oncontextmenu="return false;" disabled="@gameDisabled">
                                                @if (localTile.SurroundingMines > 0 && localTile.HasMine == false)
                                                {
                                                    <span>@localTile.SurroundingMines.ToString()</span>
                                                }
                                            </button>
                                        }
                                    }
                                    else
                                    {
                                        if (minesweeper.State == GameState.Lost && localTile.HasMine)
                                        {
                                            if (localTile.HasFlag)
                                            {
                                                <button class="col minesweeper-tile-clicked" oncontextmenu="return false;" disabled="@true">
                                                    <img class="minesweeper-tile-image" src="images/mine-incorrect.png" />
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="col minesweeper-tile-clicked" oncontextmenu="return false;" disabled="@true">
                                                    <img class="minesweeper-tile-image" src="images/mine.png" />
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <button class="col minesweeper-tile" oncontextmenu="return false;" disabled="@gameDisabled"
                                                    @onmousedown="(() => minesweeper.State = GameState.InPlay)"
                                                    @onmouseout="(() => { if (minesweeper.State == GameState.InPlay) { minesweeper.State = GameState.InProgress; } })"
                                                    @onmouseup="((e) => OnGameTileClick(e, localX, localY))">
                                                @if (localTile.HasFlag)
                                                {
                                                    <img class="minesweeper-tile-image" src="images/flag.png" />
                                                }
                                            </button>
                                        }
                                    }

                                }
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@code{
    private Minesweeper minesweeper = null;

    private Timer timer;

    private int ElapsedSeconds = 0;

    private Difficulty selectedDifficulty = Difficulty.Intermediate;

    protected override void OnInitialized()
    {
        minesweeper = new Minesweeper(selectedDifficulty);
        InitializeTimer();
    }

    private void OnChangeDifficulty()
    {
        minesweeper = new Minesweeper(selectedDifficulty);
        InitializeTimer();
    }

    private void SmileyClicked()
    {
        if (minesweeper.State == GameState.Lost || minesweeper.State == GameState.Won)
        {
            minesweeper = new Minesweeper(selectedDifficulty);
            InitializeTimer();
        }
    }

    private void InitializeTimer()
    {
        ElapsedSeconds = 0;

        timer?.Stop();
        timer?.Dispose();
        timer = new Timer(1000);
        timer.Elapsed += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                ElapsedSeconds++;
                StateHasChanged();
            });
        };
    }

    private void OnGameTileClick(MouseEventArgs e, int x, int y)
    {
        if (!timer.Enabled) { timer.Start(); }

        minesweeper.TileClicked(x, y, e.Button);

        if (minesweeper.State == GameState.Lost || minesweeper.State == GameState.Won)
        {
            timer?.Stop();
            timer?.Dispose();
        }
    }

    void IDisposable.Dispose()
    {
        timer?.Dispose();
    }
}
